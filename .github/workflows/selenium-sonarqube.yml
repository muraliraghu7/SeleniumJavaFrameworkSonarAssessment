name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:  # This allows manual trigger of the workflow

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java 22
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '22'
          distribution: 'temurin'

      # Step 3: Install Maven
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      # Step 4: Install dependencies (optional, if you still want to install dependencies but skip tests)
      - name: Install Dependencies
        run: mvn clean install -DskipTests

      # Step 5: Run SonarQube Analysis
      - name: SonarCloud Analysis
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=muraliraghu7_SeleniumJavaFrameworkSonarAssessment \
            -Dsonar.organization=murali-raghupathy \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Step 6: Fetch SonarCloud Metrics and Issues
      - name: Fetch SonarCloud Metrics and Issues
        run: |
          # Fetch metrics (e.g., bugs, vulnerabilities, code smells, coverage)
          curl -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/measures/component?componentKey=muraliraghu7_SeleniumJavaFrameworkSonarAssessment&metricKeys=bugs,vulnerabilities,code_smells,coverage" > sonar-metrics.json

          # Fetch unresolved issues
          curl -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/issues/search?componentKeys=muraliraghu7_SeleniumJavaFrameworkSonarAssessment&resolved=false" > sonar-issues.json

          # Log the content of the metrics and issues files for debugging
          cat sonar-metrics.json
          cat sonar-issues.json

      # Step 7: Generate a Report (HTML or CSV)
      - name: Generate Sonar Report
        run: |
          # Use Node.js to convert the JSON data into a readable report
          npm install axios

          echo "Generating SonarQube Report..."

          node -e "
          const fs = require('fs');
          const metrics = require('./sonar-metrics.json');
          const issues = require('./sonar-issues.json');

          // Log the structure of the metrics to debug
          console.log('Metrics data:', JSON.stringify(metrics, null, 2));

          let report = '<html><body>';
          report += '<h1>SonarQube Report</h1>';
          
          // Check if 'measures' exists before attempting to process it
          if (metrics && metrics.component && metrics.component.measures) {
            report += '<h2>Metrics</h2>';
            report += '<ul>';
            metrics.component.measures.forEach(measure => {
              report += \`<li>\${measure.metric}: \${measure.value}</li>\`;
            });
            report += '</ul>';
          } else {
            report += '<h2>No Metrics Available</h2>';
            report += '<p>Metrics data is missing or malformed.</p>';
          }

          // Check if issues exist
          if (issues && issues.issues) {
            report += '<h2>Unresolved Issues</h2>';
            issues.issues.forEach(issue => {
              report += \`<p>\${issue.message} (\${issue.severity})</p>\`;
            });
          } else {
            report += '<h2>No Unresolved Issues</h2>';
            report += '<p>No unresolved issues found.</p>';
          }

          report += '</body></html>';
          fs.writeFileSync('sonar-report.html', report);
          console.log('Report generated: sonar-report.html');
          "

          # Save the report as an artifact or upload it elsewhere if needed
          mv sonar-report.html $GITHUB_WORKSPACE/sonar-report.html

      # Step 8: Upload the Report (optional)
      - name: Upload Sonar Report
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: sonar-report.html
