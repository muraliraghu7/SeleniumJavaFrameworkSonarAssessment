name: SonarQube Analysis

on:
  # Triggers the workflow on push to the main branch
  push:
    branches:
      - main
  # Triggers the workflow on pull requests
  pull_request:

  workflow_dispatch:
  # Schedule the workflow to run every 4 hours
  schedule:
    - cron: "0 */4 * * *" # Runs every 4 hours

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Java 22
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'

      # Step 3: Install Maven
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: mvn clean install -DskipTests

      # Step 5: Run SonarQube Analysis
      - name: SonarCloud Analysis
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=muraliraghu7_SeleniumJavaFrameworkSonarAssessment \
            -Dsonar.organization=murali-raghupathy \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      # Step 6: Fetch SonarCloud Metrics and Issues
      - name: Fetch SonarCloud Metrics and Issues
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/measures/component?componentKey=muraliraghu7_SeleniumJavaFrameworkSonarAssessment&metricKeys=bugs,vulnerabilities,code_smells,coverage" > sonar-metrics.json
          curl -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/issues/search?componentKeys=muraliraghu7_SeleniumJavaFrameworkSonarAssessment&resolved=false" > sonar-issues.json
          cat sonar-metrics.json
          cat sonar-issues.json

      # Step 7: Generate an HTML Report
      - name: Generate Sonar Report
        run: |
          npm install axios
          echo "Generating SonarQube Report..."
          node -e "
          const fs = require('fs');
          const metrics = require('./sonar-metrics.json');
          const issues = require('./sonar-issues.json');
          const timestamp = new Date().toLocaleString();
          let report = '<html><head><title>SonarQube Report</title>';
          report += '<style>body { font-family: Arial, sans-serif; margin: 20px; }';
          report += 'h1, h2 { color: #2c3e50; }';
          report += 'table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }';
          report += 'th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }';
          report += 'th { background-color: #f4f4f4; }';
          report += '.severity-MINOR { color: #2980b9; }';
          report += '.severity-MAJOR { color: #e67e22; }';
          report += '.severity-BLOCKER { color: #e74c3c; font-weight: bold; }</style></head><body>';
          report += '<h1>SonarQube Analysis Report</h1>';
          report += \`<p><strong>Generated on:</strong> \${timestamp}</p>\`;
          if (metrics && metrics.component && metrics.component.measures) {
            report += '<h2>Metrics</h2><table><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody>';
            metrics.component.measures.forEach(measure => {
              report += \`<tr><td>\${measure.metric}</td><td>\${measure.value}</td></tr>\`;
            });
            report += '</tbody></table>';
          } else {
            report += '<h2>No Metrics Available</h2><p>Metrics data is missing or malformed.</p>';
          }
          if (issues && issues.issues && issues.issues.length > 0) {
            report += '<h2>Unresolved Issues</h2><table><thead><tr><th>Severity</th><th>Message</th><th>File</th></tr></thead><tbody>';
            issues.issues.forEach(issue => {
              const severityClass = \`severity-\${issue.severity}\`;
              report += \`<tr><td class="\${severityClass}">\${issue.severity}</td><td>\${issue.message}</td><td>\${issue.component}</td></tr>\`;
            });
            report += '</tbody></table>';
          } else {
            report += '<h2>No Unresolved Issues</h2><p>No unresolved issues found.</p>';
          }
          report += '</body></html>';
          fs.writeFileSync('sonar-report.html', report);
          console.log('Report generated: sonar-report.html');
          "
          # Add a timestamp to the report to ensure a unique name
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          mv sonar-report.html sonar-report-${TIMESTAMP}.html

      # Step 8: Upload the Report
      - name: Upload Sonar Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: sonar-report-*.html
